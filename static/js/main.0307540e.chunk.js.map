{"version":3,"sources":["index.js"],"names":["Tile","props","value","style","color","background","borderColor","className","onClick","onContextMenu","Field","isClicked","isFlagged","this","isRevealed","i","displayValue","tiles","event","rowTotal","columnTotal","rows","createColumns","columns","j","renderTile","createRows","React","Component","Game","state","placeMines","Array","fill","mines","isFinished","flagging","tilesLeft","slice","isFlagging","nativeEvent","which","preventDefault","setState","nearbyChecker","clicked","length","flagMessage","statusMessage","handleClick","flagClick","revealClick","quickClick","Initialize","handleChange","name","target","Number","handleSubmit","alert","isInitialized","doubleCheck","quickRestart","response","restartButton","confirmClick","restartClick","onSubmit","type","onChange","min","max","required","bottom","top","right","left","tileTotal","minesLeft","Math","floor","random","recursionDepth","current","nearby","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0307540e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Tile(props) {\r\n    const redText = { color: 'red', background: 'white', borderColor: 'gainsboro' };\r\n    const greenText = { color: 'green', background: 'white', borderColor: 'gainsboro' };\r\n    const blueText = { color: 'blue', background: 'white', borderColor: 'gainsboro' };\r\n    const purpleText = { color: 'purple', background: 'white', borderColor: 'gainsboro' };\r\n    const orangeText = { color: 'orange', background: 'white', borderColor: 'gainsboro' };\r\n    const transparentText = { color: 'transparent', background: 'white', borderColor: 'gainsboro' };\r\n    const cadetBlueText = { color: 'cadetBlue', background: 'white', borderColor: 'gainsboro' };\r\n    const brownText = { color: 'brown', background: 'white', borderColor: 'gainsboro' };\r\n    const deepPinkText = { color: 'deepPink', background: 'white', borderColor: 'gainsboro' };\r\n    const mine = { color: 'crimson', background: 'black' };\r\n    const flag = { color: 'lime', background: 'black' };\r\n    const falseFlag = { color: 'orange', background: 'black' };\r\n\r\n    switch (props.value) {\r\n        case 0:\r\n            return (\r\n                <button style={transparentText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 1:\r\n            return (\r\n                <button style={blueText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 2:\r\n            return (\r\n                <button style={greenText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 3:\r\n            return (\r\n                <button style={brownText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 4:\r\n            return (\r\n                <button style={purpleText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 5:\r\n            return (\r\n                <button style={orangeText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 6:\r\n            return (\r\n                <button style={redText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 7:\r\n            return (\r\n                <button style={cadetBlueText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 8:\r\n            return (\r\n                <button style={deepPinkText} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        case 10:\r\n            return (\r\n                <button style={flag} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    F\r\n                </button>\r\n            );\r\n        case -50:\r\n            return (\r\n                <button style={falseFlag} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    X\r\n                </button>\r\n            );\r\n        case null:\r\n            return (\r\n                <button className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button style={mine} className=\"tile\" onClick={props.onClick} onContextMenu={props.onClick}>\r\n                    M\r\n                </button>\r\n            );\r\n    }\r\n}\r\n\r\nclass Field extends React.Component {\r\n    displayValue(value, isClicked, isFlagged) {\r\n        if (this.props.isRevealed && isFlagged && (value >= 0)) {\r\n            return -50;\r\n        }\r\n        if (isFlagged) {\r\n            return 10;\r\n        }\r\n        if (isClicked) {\r\n            return value;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    renderTile(i) {\r\n        return (\r\n            <Tile\r\n                value={this.displayValue(this.props.tiles[i], this.props.isClicked[i], this.props.isFlagged[i])}\r\n                onClick={(event) => this.props.onClick(i, event)}\r\n            />\r\n        );\r\n    }\r\n\r\n    createRows(rowTotal, columnTotal) {\r\n        const rows = [];\r\n        for (let i = 0; i < rowTotal; i++) {\r\n            rows[i] = <div className=\"field-row\" key={i}> {this.createColumns(i, columnTotal)}</div>\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    createColumns(i, columnTotal) {\r\n        const columns = [];\r\n        for (let j = 0; j < columnTotal; j++) {\r\n            <div className=\"block\" key={j}> {columns[j] = this.renderTile(j + i * columnTotal)}</div>\r\n        }\r\n        return columns;\r\n    }\r\n\r\n    render() {\r\n        const rows = this.props.rows;\r\n        const columns = this.props.columns;\r\n        return (\r\n            <div>\r\n                {this.createRows(rows, columns)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tiles: placeMines(Array(this.props.rows * this.props.columns).fill(0), this.props.mines, this.props.rows, this.props.columns),\r\n            isClicked: Array(this.props.rows * this.props.columns).fill(null),\r\n            isFlagged: Array(this.props.rows * this.props.columns).fill(null),\r\n            isFinished: null,\r\n            flagging: false,\r\n            tilesLeft: this.props.rows * this.props.columns,\r\n            isRevealed: false,\r\n        };\r\n    }\r\n\r\n    handleClick(i, event) {\r\n        const tiles = this.state.tiles.slice();\r\n        const isFlagging = this.state.flagging;\r\n        let isClicked = this.state.isClicked.slice();\r\n        let isFinished = this.state.isFinished;\r\n        let isFlagged = this.state.isFlagged.slice();\r\n        let tilesLeft = this.state.tilesLeft;\r\n\r\n        //right click handler\r\n        if (event.nativeEvent.which === 3) {\r\n            event.preventDefault();\r\n\r\n            if (isClicked[i] || isFinished) {\r\n                return;\r\n            }\r\n            \r\n            if(isFlagged[i])\r\n            {\r\n                isFlagged[i] = false;\r\n            }\r\n            else{\r\n                isFlagged[i] = true;\r\n            }\r\n            this.setState({\r\n                isFlagged: isFlagged,\r\n            })\r\n        }\r\n        //left click handler\r\n        else{\r\n            if (isClicked[i] || isFinished) {\r\n                return;\r\n            }\r\n            if (!isFlagging) {\r\n                if (!isFlagged[i]) {\r\n                    isClicked[i] = true;\r\n\r\n                    //this code is used when the tile clicked has no mines near it, and automatically reveals the nearby tiles\r\n                    if (tiles[i] === 0) {\r\n                        isClicked = nearbyChecker(i, this.props.rows, this.props.columns, tiles, isClicked);\r\n                    }\r\n\r\n                    let clicked = 0;\r\n\r\n                    for (let i = 0; i < isClicked.length; i++) {\r\n                        if (isClicked[i]) {\r\n                            clicked++;\r\n                        }\r\n                    }\r\n\r\n                    tilesLeft = (this.props.rows * this.props.columns) - clicked;\r\n                    //all non-mine tiles are revealed, game has been won\r\n                    if (tilesLeft === this.props.mines) {\r\n                        isFinished = 1;\r\n                    }\r\n\r\n                    //tiles[i] < 0 is the case where the user finds a mine, game is lost\r\n                    if (tiles[i] < 0) {\r\n                        isFinished = -1;\r\n                    }\r\n\r\n                    this.setState({\r\n                        isClicked: isClicked,\r\n                        isFinished: isFinished,\r\n                        tilesLeft: tilesLeft,\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (isFlagged[i]) {\r\n                    isFlagged[i] = false;\r\n                }\r\n                else {\r\n                    isFlagged[i] = true;\r\n                }\r\n                this.setState({\r\n                    isFlagged: isFlagged,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    flagClick() {\r\n        let isFlagging = this.state.flagging;\r\n        if (!isFlagging) {\r\n            isFlagging = true;\r\n        }\r\n        else {\r\n            isFlagging = false;\r\n        }\r\n        this.setState({\r\n            flagging: isFlagging,\r\n        })\r\n    }\r\n\r\n    quickClick() {\r\n        this.setState({\r\n            tiles: placeMines(Array(this.props.rows * this.props.columns).fill(0), this.props.mines, this.props.rows, this.props.columns),\r\n            isClicked: Array(this.props.rows * this.props.columns).fill(null),\r\n            isFlagged: Array(this.props.rows * this.props.columns).fill(null),\r\n            isFinished: null,\r\n            flagging: false,\r\n            tilesLeft: this.props.rows * this.props.columns,\r\n            isRevealed: false,\r\n        })\r\n    }\r\n\r\n    revealClick() {\r\n        const tiles = this.state.tiles;\r\n        let isClicked = this.state.isClicked.slice();\r\n\r\n        for (let i = 0; i < tiles.length; i++) {\r\n            if (tiles[i] < 0) {\r\n                isClicked[i] = true;\r\n            }\r\n        }\r\n        this.setState({\r\n            isClicked: isClicked,\r\n            isFinished: -1,\r\n            isRevealed: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const tiles = this.state.tiles;\r\n        const isClicked = this.state.isClicked;\r\n        const rows = this.props.rows;\r\n        const columns = this.props.columns;\r\n        const isFlagged = this.state.isFlagged;\r\n        const isFlagging = this.state.flagging;\r\n        const isFinished = this.state.isFinished;\r\n        const tilesLeft = this.state.tilesLeft;\r\n        const mines = this.props.mines;\r\n        const isRevealed = this.state.isRevealed;\r\n\r\n        let flagMessage = '';\r\n        if (isFlagging) {\r\n            flagMessage = \"Flagging is [On]\"\r\n        }\r\n        else {\r\n            flagMessage = \"Flagging is [Off]\"\r\n        }\r\n\r\n        let statusMessage = '';\r\n        let mineless = tilesLeft - mines;\r\n        if (isFinished > 0) {\r\n            statusMessage = \"Only mines are left, You win.  Congratulations.\"\r\n        }\r\n        else if (isFinished < 0) {\r\n            statusMessage = \"You found a mine, You lost.  Better luck next time.\"\r\n        }\r\n        else {\r\n            statusMessage = \"The game is ongoing. \" + mineless + \" tiles are left without mines.\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {statusMessage}\r\n                <Field\r\n                    tiles={tiles}\r\n                    isClicked={isClicked}\r\n                    onClick={(i, event) => this.handleClick(i, event)}\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    isFlagged={isFlagged}\r\n                    isRevealed={isRevealed}\r\n                />\r\n                <br></br>\r\n                <div>{flagMessage}</div>\r\n                <button onClick={() => { this.flagClick() }}> Flag Toggle </button>\r\n                <br></br>\r\n                <br></br>\r\n                <button onClick={() => { this.revealClick() }}> Reveal Results </button>\r\n                <br></br>\r\n                <br></br>\r\n                <div>Quick Remake will restart with the same board size and mine total.</div>\r\n                <button onClick={() => { this.quickClick() }}> Quick Remake </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Initialize extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isInitialized: null,\r\n            rows: null,\r\n            columns: null,\r\n            mines: null,\r\n            doubleCheck: false,\r\n            quickRestart: false,\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        this.setState({\r\n            [name]: Number(value)\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let rows = this.state.rows;\r\n        let columns = this.state.columns;\r\n        let mines = this.state.mines;\r\n\r\n        if (mines > (rows * columns)) {\r\n            alert(\"cannot have more mines than tiles to put them on.\");\r\n        }\r\n        else {\r\n            this.setState({\r\n                isInitialized: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    restartClick() {\r\n        this.setState({\r\n            doubleCheck: true,\r\n        })\r\n    }\r\n\r\n    confirmClick(response) {\r\n        if (response) {\r\n            this.setState({\r\n                rows: null,\r\n                columns: null,\r\n                mines: null,\r\n                isInitialized: false,\r\n                doubleCheck: false,\r\n            })\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                doubleCheck: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const isInitialized = this.state.isInitialized;\r\n        const rows = this.state.rows;\r\n        const columns = this.state.columns;\r\n        const mines = this.state.mines;\r\n        let restartButton;\r\n\r\n        if (this.state.doubleCheck) {\r\n            restartButton = <div>\r\n                <div>Really Remake Game?</div>\r\n                <button onClick={() => { this.confirmClick(true) }}> Yes </button>\r\n                <button onClick={() => { this.confirmClick(false) }}> No </button>\r\n            </div>\r\n        }\r\n        else {\r\n            restartButton = <button onClick={() => { this.restartClick() }}> Remake Game </button>\r\n        }\r\n        if (isInitialized) {\r\n            return (\r\n                <div className=\"mineclearer\">\r\n                    <h1>Mineclearer</h1>\r\n                    <Game\r\n                        rows={rows}\r\n                        columns={columns}\r\n                        mines={mines}\r\n                    />\r\n                    <br></br>\r\n                    <br></br>\r\n                    {restartButton}\r\n                    <br></br>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <form className=\"initializeForm\" onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Desired Rows:\r\n                        <input type=\"number\" name=\"rows\" onChange={this.handleChange} min=\"1\" max=\"50\" required />\r\n                        <br></br>\r\n                    </label>\r\n                    <label>\r\n                        Desired Columns:\r\n                        <input type=\"number\" name=\"columns\" onChange={this.handleChange} min=\"1\" max=\"50\" required />\r\n                        <br></br>\r\n                    </label>\r\n                    <label>\r\n                        Desired Mines:\r\n                        <input type=\"number\" name=\"mines\" onChange={this.handleChange} min=\"1\" required />\r\n                        <br></br>\r\n                    </label>\r\n                    <input type=\"submit\" />\r\n                </form>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Initialize />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction placeMines(tiles, mines, rows, columns) {\r\n    let bottom = true;\r\n    let top = true;\r\n    let right = true;\r\n    let left = true;\r\n    const tileTotal = tiles.length;\r\n    let tilesLeft = tiles.length;\r\n    let minesLeft = mines;\r\n\r\n    for (let i = 0; i < tileTotal; i++) {\r\n        /*rolls a value between tiles left and mines left, sets the tile as a mine if the roll is less than or \r\n        equal to mines left.  Then increments the tilesLeft and mines left accordingly and updates the nearby \r\n        tiles to reflect the nearby mine's presence.*/\r\n        if (((Math.floor(Math.random() * tilesLeft)) + 1) <= minesLeft) {\r\n            left = true;\r\n            right = true;\r\n            top = true;\r\n            bottom = true;\r\n\r\n            tiles[i] = -20;\r\n            minesLeft = minesLeft - 1;\r\n\r\n            //this if statement is true if i is not on the left border\r\n            if ((i % columns) !== 0) {\r\n                left = false;\r\n            }\r\n            //this if statement is true if i is not on the right border\r\n            if ((i % columns) !== (columns - 1)) {\r\n                right = false;\r\n            }\r\n            //this if statement is true if i is not on the top border\r\n            if (i >= columns) {\r\n                top = false;\r\n            }\r\n            //this if statement is true if i is not on the bottom border\r\n            if (i < ((rows * columns) - columns)) {\r\n                bottom = false;\r\n            }\r\n\r\n            //checks nearby tiles to the left and increments them if they exist\r\n            if (!left) {\r\n                tiles[i - 1]++;\r\n                if (!top) {\r\n                    tiles[(i - 1) - columns]++;\r\n                }\r\n                if (!bottom) {\r\n                    tiles[(i - 1) + columns]++;\r\n                }\r\n            }\r\n\r\n            //checks nearby tiles to the right and increments them if they exist\r\n            if (!right) {\r\n                tiles[i + 1]++;\r\n                if (!top) {\r\n                    tiles[(i + 1) - columns]++;\r\n                }\r\n                if (!bottom) {\r\n                    tiles[(i + 1) + columns]++;\r\n                }\r\n            }\r\n\r\n            //checks the tile directly above and increments it if it exists\r\n            if (!top) {\r\n                tiles[i - columns]++;\r\n            }\r\n\r\n            //checks the tile directly below and increments it if it exists.\r\n            if (!bottom) {\r\n                tiles[i + columns]++;\r\n            }\r\n        }\r\n        tilesLeft = tilesLeft - 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//checks nearby tiles from the game instance to reveal all tiles next to tiles without any mines nearby\r\nfunction nearbyChecker(i, rows, columns, tiles, isClicked, recursionDepth) {\r\n    let bottom = true;\r\n    let top = true;\r\n    let right = true;\r\n    let left = true;\r\n    let current = null;\r\n    let nearby = [];\r\n\r\n    //this section tracks recursion depth and limits it so as to not break on very large/sparse games\r\n    if (!Number(recursionDepth)) {\r\n        recursionDepth = 1;\r\n    }\r\n    else {\r\n        recursionDepth++;\r\n        if (recursionDepth >= 1000) {\r\n            return isClicked;\r\n        }\r\n    }\r\n\r\n    //this if statement is true if i is not on the left border\r\n    if ((i % columns) !== 0) {\r\n        left = false;\r\n    }\r\n    //this if statement is true if i is not on the right border\r\n    if ((i % columns) !== (columns - 1)) {\r\n        right = false;\r\n    }\r\n    //this if statement is true if i is not on the top border\r\n    if (i >= columns) {\r\n        top = false;\r\n    }\r\n    //this if statement is true if i is not on the bottom border\r\n    if (i < ((rows * columns) - columns)) {\r\n        bottom = false;\r\n    }\r\n\r\n    //checks nearby tiles to the left and updates it's clicked value and adds it to nearby to be iterated over\r\n    current = i - 1;\r\n    if (!left) {\r\n        if (!isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n        current = (i - 1) - columns;\r\n        if (!top && !isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n        current = (i - 1) + columns;\r\n        if (!bottom && !isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n    }\r\n\r\n    //checks nearby tiles to the right and updates it's clicked value and adds it to nearby to be iterated over\r\n    current = i + 1;\r\n    if (!right) {\r\n        if (!isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n        current = (i + 1) - columns;\r\n        if (!top && !isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n        current = (i + 1) + columns;\r\n        if (!bottom && !isClicked[current]) {\r\n            nearby.push(current);\r\n            isClicked[current] = true;\r\n        }\r\n    }\r\n\r\n    //checks the tile directly above, updates it's clicked value and adds it to nearby to be iterated over\r\n    current = i - columns;\r\n    if (!top && !isClicked[current]) {\r\n        nearby.push(current);\r\n        isClicked[current] = true;\r\n    }\r\n\r\n    //checks the tile directly below, updates it's clicked value and adds it to nearby to be iterated over\r\n    current = i + columns;\r\n    if (!bottom && !isClicked[current]) {\r\n        nearby.push(current);\r\n        isClicked[current] = true;\r\n    }\r\n\r\n    for (let i = 0; i < nearby.length; i++) {\r\n        if (tiles[nearby[i]] === 0) {\r\n            isClicked = nearbyChecker(nearby[i], rows, columns, tiles, isClicked, recursionDepth);\r\n        }\r\n    }\r\n    return isClicked;\r\n}"],"sourceRoot":""}